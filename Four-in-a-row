#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
using namespace std;
class Board {
protected:
    int n_rows, n_cols;
    char** board;
    int n_moves = 0;
public:
    virtual bool update_board(int x, int y, char symbol) = 0;
    virtual void display_board() = 0;
    virtual bool is_winner() = 0;
    virtual bool is_draw() = 0;
    virtual bool game_is_over() = 0;
};
class ConnectFour_Board : public Board {
public:
    ConnectFour_Board();
    bool update_board(int x, int y, char symbol) override;
    void display_board() override;
    bool is_winner() override;
    bool is_draw() override;
    bool game_is_over() override;
};
class Player {
protected:
    string name;
    char symbol;

public:
    Player(char symbol);
    virtual void get_move(int& x, int& y);
    string to_string();
    char get_symbol();
};
class ConnectFour_Player : public Player {
public:
    ConnectFour_Player(char symbol);
    void get_move(int& x, int& y) override;
};
class ConnectFour_RandomPlayer : public Player {
public:
    ConnectFour_RandomPlayer(char symbol);
    void get_move(int& x, int& y) override;
};

class GameManager {
private:
    Board* boardPtr;
    Player* players[2];

public:
    GameManager(Board* bPtr, Player* playerPtr[2]);
    void run();
};
ConnectFour_Board::ConnectFour_Board() {
    n_rows = 6;
    n_cols = 7;
    board = new char*[n_rows];
    for (int i = 0; i < n_rows; i++) {
        board[i] = new char[n_cols];
        for (int j = 0; j < n_cols; j++)
            board[i][j] = 0;
    }
}
bool ConnectFour_Board::update_board(int x, int y, char mark) {
    if (x < 0 || x >= n_rows || y < 0 || y >= n_cols || board[x][y] != 0) {
        return false;
    }

    for (int i = n_rows - 1; i >= 0; i--) {
        if (board[i][y] == 0) {
            board[i][y] = toupper(mark);
            n_moves++;
            return true;
        }
    }

    return false;
}
void ConnectFour_Board::display_board() {
    for (int i = 0; i < n_rows; i++) {
        cout << "\n| ";
        for (int j = 0; j < n_cols; j++) {
            cout << " " << setw(2) << board[i][j] << " |";
        }
        cout << "\n-----------------------------";
    }
    cout << endl;
}
bool ConnectFour_Board::is_winner() {

    for (int row = 0; row < n_rows; row++) {
        for (int col = 0; col < n_cols; col++) {
            char symbol = board[row][col];
            if (symbol != 0) {
                // Check vertically
                if (row + 3 < n_rows && symbol == board[row + 1][col] &&
                    symbol == board[row + 2][col] && symbol == board[row + 3][col])
                    return true;


                if (col + 3 < n_cols && symbol == board[row][col + 1] &&
                    symbol == board[row][col + 2] && symbol == board[row][col + 3])
                    return true;


                if (row + 3 < n_rows && col + 3 < n_cols &&
                    symbol == board[row + 1][col + 1] && symbol == board[row + 2][col + 2] &&
                    symbol == board[row + 3][col + 3])
                    return true;


                if (row - 3 >= 0 && col + 3 < n_cols &&
                    symbol == board[row - 1][col + 1] && symbol == board[row - 2][col + 2] &&
                    symbol == board[row - 3][col + 3])
                    return true;
            }
        }
    }

    return false;
}
bool ConnectFour_Board::is_draw() {
    return (n_moves == n_rows * n_cols && !is_winner());
}

bool ConnectFour_Board::game_is_over() {
    return is_winner() || (n_moves == n_rows * n_cols);
}


Player::Player(char symbol) {
    this->symbol = symbol;
}

void Player::get_move(int& x, int& y) {
    cout << "\nPlease enter your move (row and column, separated by space): ";
    cin >> x >> y;
}

string Player::to_string() {
    return "Player";
}

char Player::get_symbol() {
    return symbol;
}


ConnectFour_Player::ConnectFour_Player(char symbol) : Player(symbol) {}

void ConnectFour_Player::get_move(int& x, int& y) {
    Player::get_move(x, y); // Use the base class implementation
}


ConnectFour_RandomPlayer::ConnectFour_RandomPlayer(char symbol) : Player(symbol) {}

void ConnectFour_RandomPlayer::get_move(int& x, int& y) {

    x = 0;
    y = (int)(rand() / (RAND_MAX + 1.0) * 7);
}


GameManager::GameManager(Board* bPtr, Player* playerPtr[2]) {
    boardPtr = bPtr;
    players[0] = playerPtr[0];
    players[1] = playerPtr[1];
}

void GameManager::run() {
    int x, y;

    boardPtr->display_board();

    while (!boardPtr->game_is_over()) {
        for (int i : {0, 1}) {
            players[i]->get_move(x, y);
            while (!boardPtr->update_board(x, y, players[i]->get_symbol())) {
                cout << "Invalid move. Try again.\n";
                players[i]->get_move(x, y);
            }
            boardPtr->display_board();
            if (boardPtr->is_winner()) {
                cout << players[i]->to_string() << " wins!\n";
                return;
            }
            if (boardPtr->is_draw()) {
                cout << "It's a draw!\n";
                return;
            }
        }
    }
}

int main() {
    srand(static_cast<unsigned>(time(nullptr)));

    int choice;
    Player* players[2];

    players[0] = new ConnectFour_Player('X');

    cout << "Welcome to Connect Four Game. :)\n";
    cout << "Press 1 if you want to play with the computer: ";
    cin >> choice;

    if (choice != 1)
        players[1] = new ConnectFour_Player('O');
    else
        players[1] = new ConnectFour_RandomPlayer('O');

    GameManager connect_four_game(new ConnectFour_Board(), players);
    connect_four_game.run();

    return 0;
}



