#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

class Board;
class X_O_Board;
class ConnectFour_Board;
class Player;
class RandomPlayer;
class ConnectFour_Player;
class ConnectFour_RandomPlayer;
class GameManager;

class Board {
protected:
    int n_rows, n_cols;
    char** board;
    int n_moves = 0;

public:
    virtual ~Board() {
        for (int i = 0; i < n_rows; ++i) {
            delete[] board[i];
        }
        delete[] board;
    }

    virtual bool update_board(int x, int y, char symbol) = 0;
    virtual bool is_winner() = 0;
    virtual bool is_draw() = 0;
    virtual void display_board() = 0;
    virtual bool game_is_over() = 0;
};

class X_O_Board : public Board {
public:
    X_O_Board();
    bool update_board(int x, int y, char mark);
    void display_board();
    bool is_winner();
    bool is_draw();
    bool game_is_over();
};
class ConnectFour_Board : public Board {
public:
    ConnectFour_Board();
    bool update_board(int x, int y, char symbol) override;
    void display_board() override;
    bool is_winner() override;
    bool is_draw() override;
    bool game_is_over() override;
};

class Player {
protected:
    string name;
    char symbol;

public:
    Player(char symbol);
    Player(int order, char symbol);
    virtual void get_move(int& x, int& y);
    string to_string();
    char get_symbol();
};
class RandomPlayer : public Player {
protected:
    int dimension;

public:
    RandomPlayer(char symbol, int dimension);
    void get_move(int& x, int& y);
};

class ConnectFour_Player : public Player {
public:
    ConnectFour_Player(char symbol);
    void get_move(int& x, int& y) override;
};

class ConnectFour_RandomPlayer : public Player {
public:
    ConnectFour_RandomPlayer(char symbol);
    void get_move(int& x, int& y) override;
};
class GameManager {
private:
    Board* boardPtr;
    Player* players[2];

public:
    GameManager(Board* bPtr, Player* playerPtr[2]);
    void run();
};

X_O_Board::X_O_Board() {
    n_rows = n_cols = 3;
    board = new char*[n_rows];
    for (int i = 0; i < n_rows; i++) {
        board[i] = new char[n_cols];
        for (int j = 0; j < n_cols; j++)
            board[i][j] = 0;
    }
}

bool X_O_Board::update_board(int x, int y, char mark) {
    if (!(x < 0 || x > 2 || y < 0 || y > 2) && (board[x][y] == 0)) {
        board[x][y] = toupper(mark);
        n_moves++;
        return true;
    } else {
        return false;
    }
}

void X_O_Board::display_board() {
    for (int i : {0, 1, 2}) {
        cout << "\n| ";
        for (int j : {0, 1, 2}) {
            cout << "(" << i << "," << j << ")";
            cout << setw(2) << board[i][j] << " |";
        }
        cout << "\n-----------------------------";
    }
    cout << endl;
}
bool X_O_Board::is_winner() {
    char row_win[3], col_win[3], diag_win[2];
    for (int i : {0, 1, 2}) {
        row_win[i] = board[i][0] & board[i][1] & board[i][2];
        col_win[i] = board[0][i] & board[1][i] & board[2][i];
    }
    diag_win[0] = board[0][0] & board[1][1] & board[2][2];
    diag_win[1] = board[2][0] & board[1][1] & board[0][2];

    for (int i : {0, 1, 2}) {
        if ((row_win[i] && (row_win[i] == board[i][0])) ||
            (col_win[i] && (col_win[i] == board[0][i])))
            return true;
    }
    if ((diag_win[0] && diag_win[0] == board[1][1]) ||
        (diag_win[1] && diag_win[1] == board[1][1]))
        return true;
    return false;
}
bool X_O_Board::is_draw() {
    return (n_moves == 9 && !is_winner());
}

bool X_O_Board::game_is_over() {
    return n_moves >= 9;
}

ConnectFour_Board::ConnectFour_Board() {
    n_rows = 6;
    n_cols = 7;
    board = new char*[n_rows];
    for (int i = 0; i < n_rows; i++) {
        board[i] = new char[n_cols];
        for (int j = 0; j < n_cols; j++)
            board[i][j] = 0;
    }
}
bool ConnectFour_Board::update_board(int x, int y, char mark) {
    if (x < 0 || x >= n_rows || y < 0 || y >= n_cols || board[x][y] != 0) {
        return false;
    }

    for (int i = n_rows - 1; i >= 0; i--) {
        if (board[i][y] == 0) {
            board[i][y] = toupper(mark);
            n_moves++;
            return true;
        }
    }

    return false;
}

void ConnectFour_Board::display_board() {
    for (int i = 0; i < n_rows; i++) {
        cout << "\n| ";
        for (int j = 0; j < n_cols; j++) {
            cout << " " << setw(2) << board[i][j] << " |";
        }
        cout << "\n-------------------------------";
    }
    cout << endl;
}
bool ConnectFour_Board::is_winner() {

    for (int row = 0; row < n_rows; row++) {
        for (int col = 0; col < n_cols; col++) {
            char symbol = board[row][col];
            if (symbol != 0) {
                if (row + 3 < n_rows && symbol == board[row + 1][col] &&
                    symbol == board[row + 2][col] && symbol == board[row + 3][col])
                    return true;

                if (col + 3 < n_cols && symbol == board[row][col + 1] &&
                    symbol == board[row][col + 2] && symbol == board[row][col + 3])
                    return true;

                if (row + 3 < n_rows && col + 3 < n_cols &&
                    symbol == board[row + 1][col + 1] && symbol == board[row + 2][col + 2] &&
                    symbol == board[row + 3][col + 3])
                    return true;

                if (row - 3 >= 0 && col + 3 < n_cols &&
                    symbol == board[row - 1][col + 1] && symbol == board[row - 2][col + 2] &&
                    symbol == board[row - 3][col + 3])
                    return true;
            }
        }
    }

    return false;
}

bool ConnectFour_Board::is_draw() {
    return (n_moves == n_rows * n_cols && !is_winner());
}

bool ConnectFour_Board::game_is_over() {
    return is_winner() || (n_moves == n_rows * n_cols);
}

Player::Player(char symbol) {
    this->symbol = symbol;
}

Player::Player(int order, char symbol) {
    cout << "Welcome player " << order << endl;
    cout << "Please enter your name: ";
    cin >> name;
    this->symbol = symbol;
}

void Player::get_move(int& x, int& y) {
    cout << "\nPlease enter your move x and y (0 to 2) separated by spaces: ";
    cin >> x >> y;
}

string Player::to_string() {
    return "Player: " + name;
}

char Player::get_symbol() {
    return symbol;
}

RandomPlayer::RandomPlayer(char symbol, int dimension) : Player(symbol) {
    this->dimension = dimension;
    this->name = "Random Computer Player";
    cout << "My name is " << name << endl;
}

void RandomPlayer::get_move(int& x, int& y) {
    x = static_cast<int>(rand() / (RAND_MAX + 1.0) * dimension);
    y = static_cast<int>(rand() / (RAND_MAX + 1.0) * dimension);
}

ConnectFour_Player::ConnectFour_Player(char symbol) : Player(symbol) {}

void ConnectFour_Player::get_move(int& x, int& y) {
    Player::get_move(x, y);
}

ConnectFour_RandomPlayer::ConnectFour_RandomPlayer(char symbol) : Player(symbol) {}

void ConnectFour_RandomPlayer::get_move(int& x, int& y) {
    x = 0;
    y = static_cast<int>(rand() / (RAND_MAX + 1.0) * 7);
}

GameManager::GameManager(Board* bPtr, Player* playerPtr[2]) {
    boardPtr = bPtr;
    players[0] = playerPtr[0];
    players[1] = playerPtr[1];
}

void GameManager::run() {
    int x, y;

    boardPtr->display_board();

    while (!boardPtr->game_is_over()) {
        for (int i : {0, 1}) {
            players[i]->get_move(x, y);
            while (!boardPtr->update_board(x, y, players[i]->get_symbol())) {
                players[i]->get_move(x, y);
            }
            boardPtr->display_board();
            if (boardPtr->is_winner()) {
                cout << players[i]->to_string() << " wins\n";
                return;
            }
            if (boardPtr->is_draw()) {
                cout << "Draw!\n";
                return;
            }
        }
    }
}
class TICTACTOE5x5Board : public Board {
private:
    int playerCounts[2] = {0, 0}; // Counts of consecutive X's or O's for each player

public:
    TICTACTOE5x5Board();
    ~TICTACTOE5x5Board();  // Destructor to free memory
    bool update_board(int x, int y, char mark);
    void display_board();
    bool is_winner();
    bool is_draw();
    bool game_is_over();
};
TICTACTOE5x5Board::TICTACTOE5x5Board () {
    n_rows = n_cols = 5;  // Updated to 5
    board = new char*[n_rows];
    for (int i = 0; i < n_rows; i++) {
        board[i] = new char[n_cols];
        for (int j = 0; j < n_cols; j++)
            board[i][j] = 0;
    }
}


bool TICTACTOE5x5Board::update_board(int x, int y, char mark) {

    if (!(x < 0 || x >= n_rows || y < 0 || y >= n_cols) && (board[x][y] == 0)) {
        board[x][y] = toupper(mark);
        n_moves++;
        return true;
    } else
        return false;
}


void TICTACTOE5x5Board::display_board() {
    for (int i = 0; i < 5; i++) {
        cout << "\n| ";
        for (int j = 0; j < 5; j++) {
            cout << setw(2) << board[i][j] << " |";
        }
        cout << "\n-----------------------------";
    }
    cout << endl;
}


bool TICTACTOE5x5Board::is_winner() {
    if (n_moves < 24) {
        return false;
    }

    char winner = 0;


    for (int i = 0; i < 5; i++) {
        int RXC_X = 0, RXC_O = 0, LCX = 0, LCO = 0;
        for (int j = 0; j < 5; j++) {

            if (board[i][j] == 'X') {
                RXC_X++;
                RXC_O = 0;
            } else if (board[i][j] == 'O') {
                RXC_O++;
                RXC_X = 0;
            } else {
                RXC_X = RXC_O = 0;
            }

            if (RXC_X == 3) {
                playerCounts[0]++;
            } else if (RXC_O == 3) {
                playerCounts[1]++;
            }


            if (board[j][i] == 'X') {
                LCX++;
                LCO = 0;
            } else if (board[j][i] == 'O') {
                LCO++;
                LCX = 0;
            } else {
                LCX = LCO = 0;
            }

            if (LCX == 3) {
                playerCounts[0]++;
            } else if (LCO == 3) {
                playerCounts[1]++;
            }
        }
    }


    int RXC1_X = 0, RXC1_O = 0, RXC2_X = 0, RXC2_O = 0;
    for (int i = 0; i < 5; i++) {

        if (board[i][i] == 'X') {
            RXC1_X++;
            RXC1_O = 0;
        } else if (board[i][i] == 'O') {
            RXC1_O++;
            RXC1_X = 0;
        } else {
            RXC1_X = RXC1_O = 0;
        }

        if (RXC1_X == 3) {
            playerCounts[0]++;
        } else if (RXC1_O == 3) {
            playerCounts[1]++;
        }


        if (board[i][4 - i] == 'X') {
            RXC2_X++;
            RXC2_O = 0;
        } else if (board[i][4 - i] == 'O') {
            RXC2_O++;
            RXC2_X = 0;
        } else {
            RXC2_X = RXC2_O = 0;
        }

        if (RXC2_X == 3) {
            playerCounts[0]++;
        } else if (RXC2_O == 3) {
            playerCounts[1]++;
        }
    }

    return (playerCounts[0] > playerCounts[1] || playerCounts[0] < playerCounts[1]) && n_moves == 24;
}


bool TICTACTOE5x5Board::is_draw() {
    return (n_moves == 25 && !is_winner());
}


bool TICTACTOE5x5Board::game_is_over() {
    return n_moves >= 25;
}
TICTACTOE5x5Board::~TICTACTOE5x5Board () {
    for (int i = 0; i < n_rows; i++) {
        delete[] board[i];
    }
    delete[] board;
}
class TICTACTOE5x5Board_Player : public Player {
public:
    TICTACTOE5x5Board_Player(char symbol);
    void get_move(int& x, int& y) override;
};

class TICTACTOE5x5Board_RandomPlayer : public Player {
public:
    TICTACTOE5x5Board_RandomPlayer(char symbol);
    void get_move(int& x, int& y) override;
};
TICTACTOE5x5Board_Player::TICTACTOE5x5Board_Player(char symbol) : Player(symbol) {}

void TICTACTOE5x5Board_Player::get_move(int& x, int& y) {
    Player::get_move(x, y);
}

TICTACTOE5x5Board_RandomPlayer::TICTACTOE5x5Board_RandomPlayer(char symbol) : Player(symbol) {}

void TICTACTOE5x5Board_RandomPlayer::get_move(int& x, int& y) {
    x = 0;
    y = static_cast<int>(rand() / (RAND_MAX + 1.0) * 7);
}
class Pyramic_Tic_Tac_Toe:public Board {
public:
    Pyramic_Tic_Tac_Toe ();
    bool update_board (int x, int y, char mark);
    void display_board();
    bool is_winner();
    bool is_draw();
    bool game_is_over();
    ~ Pyramic_Tic_Tac_Toe ();
};
Pyramic_Tic_Tac_Toe::Pyramic_Tic_Tac_Toe() {
    n_rows =3;
    n_cols = 5;
    board = new char*[n_rows];
    for (int i = 0; i < n_rows; i++) {
        board [i] = new char[n_cols];
        for (int j = 0; j < n_cols; j++)
            board[i][j] = 0;
    }
}


bool Pyramic_Tic_Tac_Toe::update_board (int x, int y, char mark){

    if((x==0&&y==2)||(x==1&&(y==1||y==2||y==3))||(x==2&&(y==0||y==1||y==2||y==3||y==4)))
    {
        board[x][y] = toupper(mark);
        n_moves++;
        return true;
    }
    else
        return false;
}


void Pyramic_Tic_Tac_Toe::display_board() {

    for (int i: {0,1,2}) {
        if(i==0){
            for (int j: {0,1,2,3,4}) {
                if(j==2){
                    cout << "                |(" << i << "," << j <<")";
                    cout << setw(2) << board [i][j] <<"|";
                }


            }
            cout << "\n-----------------------------";
            cout<<endl;

        }
        else if(i==1){
            cout<<"         |";
            for (int j: {0,1,2,3,4}) {
                if(j==1||j==2||j==3){
                    cout <<"(" << i << "," << j << ")";
                    cout << setw(2) << board [i][j] << "|";
                }



            }
            cout << "\n--------------------------------";
            cout<<endl;
        }
        else if(i==2){
            cout << "\n| ";
            for (int j: {0,1,2,3,4}) {

                cout << "(" << i << "," << j << ")";
                cout << setw(2) << board [i][j] << "|";


            }
            cout << "\n--------------------------------------";
            cout<<endl;



        }

    }
}


bool Pyramic_Tic_Tac_Toe::is_winner() {
    char row_win[3], col_win[5], diag_win[2];
    for (int i:{0,1,2}) {
        if(i==1){
            row_win[i] = board[i][1] & board[i][2] & board[i][3];
            if((row_win[i] && (row_win[i] == board[i][1]))){
                return true;
                break;
            }
        }
        if(i==2){
            for(int j:{0,1,2}){
                if(j==0){
                    row_win[i] =board[i][0] & board[i][1] &board[i][2];
                    if((row_win[i] && (row_win[i] == board[i][0]))){
                        return true;
                        break;
                    }

                }
                else if(j==1){
                    row_win[i] =board[i][1] & board[i][2] &board[i][3];
                    if((row_win[i] && (row_win[i] == board[i][1]))){
                        return true;
                        break;
                    }
                }
                else if(j==2){
                    row_win[i] =board[i][2] & board[i][3] &board[i][4];
                    if((row_win[i] && (row_win[i] == board[i][2]))){
                        return true;
                        break;
                    }
                }
            }

        }


    }
    for (int i:{0,1,2,3,4}) {
        if(i==2){
            col_win[i] = board[0][i] & board[1][i] & board[2][i];
        }

    }
    diag_win[0] = board[0][2] & board[1][1] & board[2][0];
    diag_win[1] = board[2][4] & board[1][3] & board[0][2];


    for (int i:{2}) {
        if ((col_win[i] && (col_win[i] == board[0][i])))
        {
            return true;
        }

    }
    if ((diag_win[0] && diag_win[0] == board[1][1]) ||
        (diag_win[1] && diag_win[1] == board[1][3]))
    {return true;}
    return false;
}


bool Pyramic_Tic_Tac_Toe::is_draw() {
    return (n_moves == 9 && !is_winner());
}

bool Pyramic_Tic_Tac_Toe::game_is_over () {
    return n_moves >= 9;
}
Pyramic_Tic_Tac_Toe::~Pyramic_Tic_Tac_Toe () {
    for (int i = 0; i < n_rows; i++) {
        delete[] board[i];
    }
    delete[] board;
}
class Pyramic_Tic_Tac_Toe_Player : public Player {
public:
    Pyramic_Tic_Tac_Toe_Player(char symbol);
    void get_move(int& x, int& y) override;
};

class Pyramic_Tic_Tac_Toe_RandomPlayer : public Player {
public:
    Pyramic_Tic_Tac_Toe_RandomPlayer(char symbol);
    void get_move(int& x, int& y) override;
};
Pyramic_Tic_Tac_Toe_Player::Pyramic_Tic_Tac_Toe_Player(char symbol) : Player(symbol) {}

void Pyramic_Tic_Tac_Toe_Player::get_move(int& x, int& y) {
    Player::get_move(x, y);
}

Pyramic_Tic_Tac_Toe_RandomPlayer::Pyramic_Tic_Tac_Toe_RandomPlayer(char symbol) : Player(symbol) {}

void Pyramic_Tic_Tac_Toe_RandomPlayer::get_move(int& x, int& y) {
    x = 0;
    y = static_cast<int>(rand() / (RAND_MAX + 1.0) * 7);
}
int main() {
    srand(static_cast<unsigned>(time(nullptr)));

    int choice;
    Player* players[2];
    string name;
    cout << "Welcome ya user ya habiby:)\n";
    cout << "enter your name\n";
    cin >> name ;
    cout << "Choose a game to play:\n";
    cout << "1. X-O Game\n";
    cout << "2. Connect Four Game\n";
    cout << "3.pyramid_TIC-TAC-TOE\n";
    cout << "4. TICTACTOE5x5 game \n";
    cout << "Enter your choice (1 or 2 or 3 or 4): ";
    cin >> choice;

    if (choice == 1) {
        players[0] = new Player(1, 'x');
        players[1] = new RandomPlayer('o', 3);

        GameManager x_o_game(new X_O_Board(), players);
        x_o_game.run();
    }
    else if (choice == 2)
    {
        players[0] = new ConnectFour_Player('X');

        cout << "Press 1 if you want to play with the computer: ";
        cin >> choice;

        if (choice != 1)
        {
            string name1;
            cout<< "enter the name of the 2nd player\n";
            cin >> name1;
            players[1] = new ConnectFour_Player('O');
        }

        else
            players[1] = new ConnectFour_RandomPlayer('O');

        GameManager connect_four_game(new ConnectFour_Board(), players);
        connect_four_game.run();
    }
    else if (choice == 3)
    {
        players[0] = new Pyramic_Tic_Tac_Toe_Player('X');

        cout << "Press 1 if you want to play with the computer: ";
        cin >> choice;

        if (choice != 1)
        {
            string name1;
            cout<< "enter the name of the 2nd player\n";
            cin >> name1;
            players[1] = new Pyramic_Tic_Tac_Toe_Player('O');
        }

        else
            players[1] = new Pyramic_Tic_Tac_Toe_RandomPlayer('O');

        GameManager Pyramic_Tic_Tac_Toe_game(new Pyramic_Tic_Tac_Toe(), players);
        Pyramic_Tic_Tac_Toe_game.run();
    }
    else if (choice == 4)
    {
        players[0] = new TICTACTOE5x5Board_Player('X');

        cout << "Press 1 if you want to play with the computer: ";
        cin >> choice;

        if (choice != 1)
        {
            string name1;
            cout<< "enter the name of the 2nd player\n";
            cin >> name1;
            players[1] = new TICTACTOE5x5Board_Player('O');
        }

        else
            players[1] = new TICTACTOE5x5Board_RandomPlayer('O');

        GameManager TICTACTOE5x5Board_game(new TICTACTOE5x5Board(), players);
        TICTACTOE5x5Board_game.run();
    }
    else
    {
        cout << "Invalid choice. Exiting...\n";
    }

    return 0;
}

