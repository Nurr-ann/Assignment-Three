#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

class Board;
class X_O_Board;
class ConnectFour_Board;
class Player;
class RandomPlayer;
class ConnectFour_Player;
class ConnectFour_RandomPlayer;
class GameManager;

class Board {
protected:
    int n_rows, n_cols;
    char** board;
    int n_moves = 0;

public:
    virtual ~Board() {
        for (int i = 0; i < n_rows; ++i) {
            delete[] board[i];
        }
        delete[] board;
    }

    virtual bool update_board(int x, int y, char symbol) = 0;
    virtual bool is_winner() = 0;
    virtual bool is_draw() = 0;
    virtual void display_board() = 0;
    virtual bool game_is_over() = 0;
};

class X_O_Board : public Board {
public:
    X_O_Board();
    bool update_board(int x, int y, char mark);
    void display_board();
    bool is_winner();
    bool is_draw();
    bool game_is_over();
};
class ConnectFour_Board : public Board {
public:
    ConnectFour_Board();
    bool update_board(int x, int y, char symbol) override;
    void display_board() override;
    bool is_winner() override;
    bool is_draw() override;
    bool game_is_over() override;
};

class Player {
protected:
    string name;
    char symbol;

public:
    Player(char symbol);
    Player(int order, char symbol);
    virtual void get_move(int& x, int& y);
    string to_string();
    char get_symbol();
};
class RandomPlayer : public Player {
protected:
    int dimension;

public:
    RandomPlayer(char symbol, int dimension);
    void get_move(int& x, int& y);
};

class ConnectFour_Player : public Player {
public:
    ConnectFour_Player(char symbol);
    void get_move(int& x, int& y) override;
};

class ConnectFour_RandomPlayer : public Player {
public:
    ConnectFour_RandomPlayer(char symbol);
    void get_move(int& x, int& y) override;
};
class GameManager {
private:
    Board* boardPtr;
    Player* players[2];

public:
    GameManager(Board* bPtr, Player* playerPtr[2]);
    void run();
};

X_O_Board::X_O_Board() {
    n_rows = n_cols = 3;
    board = new char*[n_rows];
    for (int i = 0; i < n_rows; i++) {
        board[i] = new char[n_cols];
        for (int j = 0; j < n_cols; j++)
            board[i][j] = 0;
    }
}

bool X_O_Board::update_board(int x, int y, char mark) {
    if (!(x < 0 || x > 2 || y < 0 || y > 2) && (board[x][y] == 0)) {
        board[x][y] = toupper(mark);
        n_moves++;
        return true;
    } else {
        return false;
    }
}

void X_O_Board::display_board() {
    for (int i : {0, 1, 2}) {
        cout << "\n| ";
        for (int j : {0, 1, 2}) {
            cout << "(" << i << "," << j << ")";
            cout << setw(2) << board[i][j] << " |";
        }
        cout << "\n-----------------------------";
    }
    cout << endl;
}
bool X_O_Board::is_winner() {
    char row_win[3], col_win[3], diag_win[2];
    for (int i : {0, 1, 2}) {
        row_win[i] = board[i][0] & board[i][1] & board[i][2];
        col_win[i] = board[0][i] & board[1][i] & board[2][i];
    }
    diag_win[0] = board[0][0] & board[1][1] & board[2][2];
    diag_win[1] = board[2][0] & board[1][1] & board[0][2];

    for (int i : {0, 1, 2}) {
        if ((row_win[i] && (row_win[i] == board[i][0])) ||
            (col_win[i] && (col_win[i] == board[0][i])))
            return true;
    }
    if ((diag_win[0] && diag_win[0] == board[1][1]) ||
        (diag_win[1] && diag_win[1] == board[1][1]))
        return true;
    return false;
}
bool X_O_Board::is_draw() {
    return (n_moves == 9 && !is_winner());
}

bool X_O_Board::game_is_over() {
    return n_moves >= 9;
}

ConnectFour_Board::ConnectFour_Board() {
    n_rows = 6;
    n_cols = 7;
    board = new char*[n_rows];
    for (int i = 0; i < n_rows; i++) {
        board[i] = new char[n_cols];
        for (int j = 0; j < n_cols; j++)
            board[i][j] = 0;
    }
}
bool ConnectFour_Board::update_board(int x, int y, char mark) {
    if (x < 0 || x >= n_rows || y < 0 || y >= n_cols || board[x][y] != 0) {
        return false;
    }

    for (int i = n_rows - 1; i >= 0; i--) {
        if (board[i][y] == 0) {
            board[i][y] = toupper(mark);
            n_moves++;
            return true;
        }
    }

    return false;
}

void ConnectFour_Board::display_board() {
    for (int i = 0; i < n_rows; i++) {
        cout << "\n| ";
        for (int j = 0; j < n_cols; j++) {
            cout << " " << setw(2) << board[i][j] << " |";
        }
        cout << "\n-------------------------------";
    }
    cout << endl;
}
bool ConnectFour_Board::is_winner() {

    for (int row = 0; row < n_rows; row++) {
        for (int col = 0; col < n_cols; col++) {
            char symbol = board[row][col];
            if (symbol != 0) {
                if (row + 3 < n_rows && symbol == board[row + 1][col] &&
                    symbol == board[row + 2][col] && symbol == board[row + 3][col])
                    return true;

                if (col + 3 < n_cols && symbol == board[row][col + 1] &&
                    symbol == board[row][col + 2] && symbol == board[row][col + 3])
                    return true;

                if (row + 3 < n_rows && col + 3 < n_cols &&
                    symbol == board[row + 1][col + 1] && symbol == board[row + 2][col + 2] &&
                    symbol == board[row + 3][col + 3])
                    return true;

                if (row - 3 >= 0 && col + 3 < n_cols &&
                    symbol == board[row - 1][col + 1] && symbol == board[row - 2][col + 2] &&
                    symbol == board[row - 3][col + 3])
                    return true;
            }
        }
    }

    return false;
}

