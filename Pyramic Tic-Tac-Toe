#include <iostream>
#include <random>
#include <iomanip>
#include <string>
using namespace std;
class Board {
protected:
    int n_rows, n_cols;
    char** board;
    int n_moves = 0;
public:
    virtual bool update_board(int x, int y, char symbol) = 0;
    virtual bool is_winner() = 0;
    virtual bool is_draw() = 0;
    virtual void display_board() = 0;
    virtual bool game_is_over() = 0;
};
class X_O_Board : public Board {
private:
    int playerCounts[2] = {0, 0}; // Counts of consecutive X's or O's for each player
public:
    X_O_Board();
    ~X_O_Board();  // Destructor to free memory
    bool update_board(int x, int y, char mark);
    void display_board();
    bool is_winner();
    bool is_draw();
    bool game_is_over();
};
X_O_Board::~X_O_Board() {
    for (int i = 0; i < n_rows; i++) {
        delete[] board[i];
    }
    delete[] board;
}
class Player {
protected:
    string name;
    char symbol;
public:
    Player(char symbol);
    Player(int order, char symbol);
    virtual void get_move(int& x, int& y);
    string to_string();
    char get_symbol();
};
class RandomPlayer : public Player {
protected:
    int dimension;

public:
    RandomPlayer(char symbol, int dimension);
    void get_move(int& x, int& y);
};
class GameManager {
private:
    Board* boardPtr;
    Player* players[2];

public:
    GameManager(Board* bPtr, Player* playerPtr[2]);
    void run();
};
X_O_Board::X_O_Board() {
    n_rows = n_cols = 5;  // Updated to 5
    board = new char*[n_rows];
    for (int i = 0; i < n_rows; i++) {
        board[i] = new char[n_cols];
        for (int j = 0; j < n_cols; j++)
            board[i][j] = 0;
    }
}
bool X_O_Board::update_board(int x, int y, char mark) {

    if (!(x < 0 || x >= n_rows || y < 0 || y >= n_cols) && (board[x][y] == 0)) {
        board[x][y] = toupper(mark);
        n_moves++;
        return true;
    } else
        return false;
}
void X_O_Board::display_board() {
    for (int i = 0; i < 5; i++) {
        cout << "\n| ";
        for (int j = 0; j < 5; j++) {
            cout << setw(2) << board[i][j] << " |";
        }
        cout << "\n-----------------------------";
    }
    cout << endl;
}
bool X_O_Board::is_winner() {
    if (n_moves < 24) {
        return false;
    }

    char winner = 0;
for (int i = 0; i < 5; i++) {
        int RXC_X = 0, RXC_O = 0, LCX = 0, LCO = 0;
        for (int j = 0; j < 5; j++) {
            // Check rows
            if (board[i][j] == 'X') {
                RXC_X++;
                RXC_O = 0;
            } else if (board[i][j] == 'O') {
                RXC_O++;
                RXC_X = 0;
            } else {
                RXC_X = RXC_O = 0;
            }
if (RXC_X == 3) {
                playerCounts[0]++;
            } else if (RXC_O == 3) {
                playerCounts[1]++;
            }

            // Check columns
            if (board[j][i] == 'X') {
                LCX++;
                LCO = 0;
            } else if (board[j][i] == 'O') {
                LCO++;
                LCX = 0;
            } else {
                LCX = LCO = 0;
            }

            if (LCX == 3) {
                playerCounts[0]++;
            } else if (LCO == 3) {
                playerCounts[1]++;
            }
        }
    }
 int RXC1_X = 0, RXC1_O = 0, RXC2_X = 0, RXC2_O = 0;
    for (int i = 0; i < 5; i++) {
        // Check diagonal 1
        if (board[i][i] == 'X') {
            RXC1_X++;
            RXC1_O = 0;
        } else if (board[i][i] == 'O') {
            RXC1_O++;
            RXC1_X = 0;
