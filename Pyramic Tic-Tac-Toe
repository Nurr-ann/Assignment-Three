#include <iostream>
#include <random>
#include <iomanip>
#include <algorithm>

using namespace std;
class Board {
protected:
    int n_rows, n_cols;
    char** board;
    int  n_moves = 0;

public:
    // Return true  if move is valid and put it on board
    // within board boundaries in empty cell
    // Return false otherwise
    virtual bool update_board (int x, int y, char symbol) = 0;
    // Returns true if there is any winner
    // either X or O
    // Written in a complex way. DO NOT DO LIKE THIS.
    virtual bool is_winner() = 0;
    // Return true if all moves are done and no winner
    virtual bool is_draw() = 0;
    // Display the board and the pieces on it
    virtual void display_board() = 0;
    // Return true if game is over
    virtual bool game_is_over() = 0;
};

///////////////////////////////////////////
// This class represents a 3 x 3 board
// used in X_O game
class Pyramic_Tic_Tac_Toe:public Board {
public:
    Pyramic_Tic_Tac_Toe ();
    bool update_board (int x, int y, char mark);
    void display_board();
    bool is_winner();
    bool is_draw();
    bool game_is_over();
};

///////////////////////////////////////////
// This class represents a player who has
// a name and a symbol to put on board
class Player {
protected:
    string name;
    char symbol;
public:
    // Two constructors to initiate player
    // Give player a symbol to use in playing
    // It can be X or O or others
    // Optionally, you can give him ID or order
    // Like Player 1 and Player 2
    Player (char symbol); // Needed for computer players
    Player (int order, char symbol);
    // Get desired move: x y (each between 0 and 2)
    // Virtual (can change for other player types)
    virtual void get_move(int& x, int& y);
    // Give player info as a string
    string to_string();
    // Get symbol used by player
    char get_symbol();
};

///////////////////////////////////////////
// This class represents a random computer player
// that generates random positions x y (0 to 2)
// If invalid, game manager asks to regenerate
class RandomPlayer: public Player {
protected:
    int dimension;
public:
    // Take a symbol and pass it to parent
    RandomPlayer (char symbol, int dimension);
    // Generate a random move
    void get_move(int& x, int& y);
};

///////////////////////////////////////////
class GameManager {
private:
    Board* boardPtr;
    Player* players[2];
public:
    GameManager(Board*, Player* playerPtr[2]);
    void run();
    // This method creates board and players
    // It displays board
    // While True
    //   For each player
    //      It takes a valid move as x, y pair (between 0 - 2)
    //      It updates board and displays otit
    //      If winner, declare so and end
    //      If draw, declare so and end

};



// Set the board
Pyramic_Tic_Tac_Toe::Pyramic_Tic_Tac_Toe() {
    n_rows =3;
    n_cols = 5;
    board = new char*[n_rows];
    for (int i = 0; i < n_rows; i++) {
        board [i] = new char[n_cols];
        for (int j = 0; j < n_cols; j++)
            board[i][j] = 0;
    }
}

// Return true  if move is valid and put it on board
// within board boundaries in empty cell
// Return false otherwise
bool Pyramic_Tic_Tac_Toe::update_board (int x, int y, char mark){
    // Only update if move is valid
    if((x==0&&y==2)||(x==1&&(y==1||y==2||y==3))||(x==2&&(y==0||y==1||y==2||y==3||y==4)))
    {
        board[x][y] = toupper(mark);
        n_moves++;
        return true;
    }
    else
        return false;
}

// Display the board and the pieces on it
void Pyramic_Tic_Tac_Toe::display_board() {

    for (int i: {0,1,2}) {
        if(i==0){
            for (int j: {0,1,2,3,4}) {
                if(j==2){
                    cout << "                |(" << i << "," << j <<")";
                    cout << setw(2) << board [i][j] <<"|";
                }


            }
            cout << "\n-----------------------------";
            cout<<endl;

        }
        else if(i==1){
            cout<<"         |";
            for (int j: {0,1,2,3,4}) {
                if(j==1||j==2||j==3){
                    cout <<"(" << i << "," << j << ")";
                    cout << setw(2) << board [i][j] << "|";
                }



            }
            cout << "\n--------------------------------";
            cout<<endl;
        }
        else if(i==2){
            cout << "\n| ";
            for (int j: {0,1,2,3,4}) {

                cout << "(" << i << "," << j << ")";
                cout << setw(2) << board [i][j] << "|";


            }
            cout << "\n--------------------------------------";
            cout<<endl;



        }

    }
}

// Returns true if there is any winner
// either X or O
// Written in a complex way. DO NOT DO LIKE THIS.
bool Pyramic_Tic_Tac_Toe::is_winner() {
    char row_win[3], col_win[5], diag_win[2];
    for (int i:{0,1,2}) {
        if(i==1){
            row_win[i] = board[i][1] & board[i][2] & board[i][3];
            if((row_win[i] && (row_win[i] == board[i][1]))){
                return true;
                break;
            }
        }
        if(i==2){
            for(int j:{0,1,2}){
                if(j==0){
                    row_win[i] =board[i][0] & board[i][1] &board[i][2];
                    if((row_win[i] && (row_win[i] == board[i][0]))){
                        return true;
                        break;
                    }

                }
                else if(j==1){
                    row_win[i] =board[i][1] & board[i][2] &board[i][3];
                    if((row_win[i] && (row_win[i] == board[i][1]))){
                        return true;
                        break;
                    }
                }
                else if(j==2){
                    row_win[i] =board[i][2] & board[i][3] &board[i][4];
                    if((row_win[i] && (row_win[i] == board[i][2]))){
                        return true;
                        break;
                    }
                }
            }

        }


    }
    for (int i:{0,1,2,3,4}) {
        if(i==2){
            col_win[i] = board[0][i] & board[1][i] & board[2][i];
        }

    }
    diag_win[0] = board[0][2] & board[1][1] & board[2][0];
    diag_win[1] = board[2][4] & board[1][3] & board[0][2];


    for (int i:{2}) {
        if ((col_win[i] && (col_win[i] == board[0][i])))
        {
            return true;
        }

    }
    if ((diag_win[0] && diag_win[0] == board[1][1]) ||
        (diag_win[1] && diag_win[1] == board[1][3]))
    {return true;}
    return false;
}

// Return true if 9 moves are done and no winner
bool Pyramic_Tic_Tac_Toe::is_draw() {
    return (n_moves == 9 && !is_winner());
}

bool Pyramic_Tic_Tac_Toe::game_is_over () {
    return n_moves >= 9;
}GameManager::GameManager(Board* bPtr, Player* playerPtr[2] ) {
    boardPtr = bPtr;
    players[0] = playerPtr[0];
    players[1] = playerPtr[1];
}

void GameManager::run() {
    int x, y;

    boardPtr->display_board();

    while (!boardPtr->game_is_over()) {
        for (int i:{0,1}) {
            players[i]->get_move(x, y);
            while (!boardPtr->update_board (x, y, players[i]->get_symbol())){
                players[i]->get_move(x, y);
            }
            boardPtr->display_board();
            if (boardPtr->is_winner()){
                cout  << players[i]->to_string() << " wins\n";
                return;
            }
            if (boardPtr->is_draw()){
                cout << "Draw!\n";
                return;
            }
        }
    }
}
RandomPlayer::RandomPlayer (char symbol, int dimension):Player(symbol)
{
    this->dimension = dimension;
    this->name = "Random Computer Player";
    cout << "My names is " << name << endl;
}

// Generate a random move
void RandomPlayer::get_move (int& x, int& y) {
    x = (int) (rand()/(RAND_MAX + 1.0) * dimension);
    y = (int) (rand()/(RAND_MAX + 1.0) * dimension);
}Player::Player(char symbol) {
    this->symbol = symbol;
}

// Optionally, you can give him ID or order
// Like Player 1 and Player 2
Player::Player (int order, char symbol) {
    cout << "Welcome player " << order << endl;
    cout << "Please enter your name: ";
    cin >> name;
    this->symbol = symbol;
}

// Get desired move: x y (each between 0 and 2)
// Virtual (can change for other player types)
void Player::get_move (int& x, int& y) {
    cout << "\nPlease enter your move x and y (0 to 2) separated by spaces: ";
    cin >> x >> y;
}

// Give player info as a string
string Player::to_string(){
    return "Player: " + name ;
}

// Get symbol used by player
char Player::get_symbol() {
    return symbol;
}



int main(){
    int choice;
    Player* players[2];
    players[0] = new Player (1, 'x');

    cout << "Welcome to FCAI X-O Game. :)\n";
    cout << "Press 1 if you want to play with computer: ";
    cin >> choice;
    if (choice != 1)
        players[1] = new Player (2, 'o');
    else
        //Player pointer points to child
        players[1] = new RandomPlayer ('o', 3);

    GameManager Pyramic_Tic_Tac_Toe_game (new Pyramic_Tic_Tac_Toe(), players);
    Pyramic_Tic_Tac_Toe_game.run();
    system ("pause");
}
